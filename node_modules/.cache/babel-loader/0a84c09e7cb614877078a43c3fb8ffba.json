{"ast":null,"code":"import _slicedToArray from \"/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport queryString from 'query-string';\nimport { of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { ofType } from 'redux-observable';\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators';\nimport { get as _get, isEmpty as _isEmpty } from 'lodash-es';\nimport { charactersActionCreators } from './charactersActions';\nexport function listCharactersEpics(action$) {\n  return action$.pipe(ofType(charactersActionCreators.LIST_ALL.REQUEST), switchMap(function (action) {\n    var query = queryString.stringify({\n      page: _get(action, 'payload.page', 1)\n    });\n    var reqQuery = _isEmpty(query) ? '' : \"?\".concat(query);\n    return ajax.getJSON(\"https://rickandmortyapi.com/api/character/\".concat(reqQuery)).pipe(delay(1), map(function (response) {\n      response.ep = _get(response, 'results', []).reduce(function (accum, _ref) {\n        var episode = _ref.episode;\n        episode.forEach(function (epUrl) {\n          var _ref2 = epUrl.match(/episode\\/(\\d+)$/) || [null, null],\n              _ref3 = _slicedToArray(_ref2, 2),\n              _ = _ref3[0],\n              epId = _ref3[1];\n\n          accum.add(epId);\n        }, new Set());\n      });\n      return charactersActionCreators.LIST_ALL.PASSED(response);\n    }), catchError(function (error) {\n      return of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response));\n    }), takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))));\n  }), catchError(function (error) {\n    return of(charactersActionCreators.LIST_ALL.FAILED(error));\n  }));\n}\nexport function getCharactersEpisodeEpics(action$) {\n  return action$.pipe(ofType(charactersActionCreators.LIST_ALL.PASSED), switchMap(function (action) {\n    var episodes = _get(action, 'payload.results', []).reduce(function (accum, _ref4) {\n      var episode = _ref4.episode;\n      episode.forEach(function (epUrl) {\n        var _ref5 = epUrl.match(/episode\\/(\\d+)$/) || [null, null],\n            _ref6 = _slicedToArray(_ref5, 2),\n            _ = _ref6[0],\n            epId = _ref6[1];\n\n        accum.add(epId);\n      }, new Set());\n    });\n\n    return {\n      type: 'GET_EPISODES',\n      episodes: episodes // return ajax.getJSON(`https://rickandmortyapi.com/api/character/${reqQuery}`)\n      //   .pipe(\n      //     delay(1),\n      //     map((response) => charactersActionCreators.LIST_ALL.PASSED(response)),\n      //     catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response))),\n      //     takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))),\n      //   )\n\n    };\n  }), catchError(function (error) {\n    return of(charactersActionCreators.LIST_ALL.FAILED(error));\n  }));\n}","map":{"version":3,"sources":["/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/src/Characters/charactersEpics.js"],"names":["queryString","of","ajax","ofType","delay","map","switchMap","takeUntil","catchError","get","_get","isEmpty","_isEmpty","charactersActionCreators","listCharactersEpics","action$","pipe","LIST_ALL","REQUEST","action","query","stringify","page","reqQuery","getJSON","response","ep","reduce","accum","episode","forEach","epUrl","match","_","epId","add","Set","PASSED","error","FAILED","xhr","CANCEL","getCharactersEpisodeEpics","episodes","type"],"mappings":"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","sourcesContent":["import queryString from 'query-string'\nimport { of } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { ofType } from 'redux-observable'\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators'\nimport { get as _get, isEmpty as _isEmpty } from 'lodash-es'\n\nimport { charactersActionCreators } from './charactersActions'\n\n\nexport function listCharactersEpics(action$) {\n  return action$\n    .pipe(\n      ofType(charactersActionCreators.LIST_ALL.REQUEST),\n      switchMap((action) => {\n        const query = queryString.stringify({ page: _get(action, 'payload.page', 1)})\n\n        const reqQuery = _isEmpty(query)\n          ? ''\n          : `?${query}`\n\n        return ajax.getJSON(`https://rickandmortyapi.com/api/character/${reqQuery}`)\n          .pipe(\n            delay(1),\n            map((response) => {\n              response.ep = _get(response, 'results', [])\n                .reduce((accum, { episode }) => {\n                  episode.forEach((epUrl) => {\n                    const [_, epId] = epUrl.match(/episode\\/(\\d+)$/) || [null, null]\n\n                    accum.add(epId)\n                  }, new Set())\n\n                })\n\n              return charactersActionCreators.LIST_ALL.PASSED(response)\n            }),\n            catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response))),\n            takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))),\n          )\n      }),\n      catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error))),\n    )\n}\n\nexport function getCharactersEpisodeEpics(action$) {\n  return action$\n    .pipe(\n      ofType(charactersActionCreators.LIST_ALL.PASSED),\n      switchMap((action) => {\n        const episodes = _get(action, 'payload.results', [])\n          .reduce((accum, { episode }) => {\n            episode.forEach((epUrl) => {\n              const [_, epId] = epUrl.match(/episode\\/(\\d+)$/) || [null, null]\n\n              accum.add(epId)\n            }, new Set())\n\n          })\n\n        return {\n          type: 'GET_EPISODES',\n          episodes,\n        }\n        // return ajax.getJSON(`https://rickandmortyapi.com/api/character/${reqQuery}`)\n        //   .pipe(\n        //     delay(1),\n        //     map((response) => charactersActionCreators.LIST_ALL.PASSED(response)),\n        //     catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response))),\n        //     takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))),\n        //   )\n      }),\n      catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error))),\n    )\n}\n"]},"metadata":{},"sourceType":"module"}