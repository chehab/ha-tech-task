{"ast":null,"code":"import _slicedToArray from \"/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport queryString from 'query-string';\nimport { of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { ofType } from 'redux-observable';\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators';\nimport { get as _get, set as _set, isEmpty as _isEmpty } from 'lodash-es';\nimport { charactersActionCreators } from './charactersActions';\nexport function listCharactersEpics(action$) {\n  return action$.pipe(ofType(charactersActionCreators.LIST_ALL.REQUEST), switchMap(function (action) {\n    var query = queryString.stringify({\n      page: _get(action, 'payload.page', 1)\n    });\n    var reqQuery = _isEmpty(query) ? '' : \"?\".concat(query);\n    return ajax.getJSON(\"https://rickandmortyapi.com/api/character/\".concat(reqQuery)).pipe(delay(1), map(function (response) {\n      _get(response, 'results', []).forEach(function (i, ndx) {\n        var episode = _get(response, \"results.\".concat(ndx, \".episode\")).map(function (epUrl) {\n          var _ref = epUrl.match(/episode\\/(\\d+)$/) || [null, null],\n              _ref2 = _slicedToArray(_ref, 2),\n              epId = _ref2[1];\n\n          return epId;\n        });\n\n        _get(response, \"results.\".concat(ndx, \".episode\"), episode);\n      });\n\n      return charactersActionCreators.LIST_ALL.PASSED(response);\n    }), catchError(function (error) {\n      return of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response));\n    }), takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))));\n  }), catchError(function (error) {\n    return of(charactersActionCreators.LIST_ALL.FAILED(error));\n  }));\n}\nexport function getCharactersEpisodeEpics(action$) {\n  return action$.pipe(ofType(charactersActionCreators.LIST_ALL.PASSED), switchMap(function (action) {\n    response.ep = Array.from(_get(response, 'results', []).reduce(function (accum, _ref3, ndx) {\n      var episode = _ref3.episode;\n      episode.forEach(function (epUrl) {\n        var _ref4 = epUrl.match(/episode\\/(\\d+)$/) || [null, null],\n            _ref5 = _slicedToArray(_ref4, 2),\n            epId = _ref5[1];\n\n        accum.add(epId);\n      });\n      return accum;\n    }, new Set()));\n    return {\n      type: 'GET_EPISODES',\n      episodes: episodes // return ajax.getJSON(`https://rickandmortyapi.com/api/character/${reqQuery}`)\n      //   .pipe(\n      //     delay(1),\n      //     map((response) => charactersActionCreators.LIST_ALL.PASSED(response)),\n      //     catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response))),\n      //     takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))),\n      //   )\n\n    };\n  }), catchError(function (error) {\n    return of(charactersActionCreators.LIST_ALL.FAILED(error));\n  }));\n}","map":{"version":3,"sources":["/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/src/Characters/charactersEpics.js"],"names":["queryString","of","ajax","ofType","delay","map","switchMap","takeUntil","catchError","get","_get","set","_set","isEmpty","_isEmpty","charactersActionCreators","listCharactersEpics","action$","pipe","LIST_ALL","REQUEST","action","query","stringify","page","reqQuery","getJSON","response","forEach","i","ndx","episode","epUrl","match","epId","PASSED","error","FAILED","xhr","CANCEL","getCharactersEpisodeEpics","ep","Array","from","reduce","accum","add","Set","type","episodes"],"mappings":"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","sourcesContent":["import queryString from 'query-string'\nimport { of } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { ofType } from 'redux-observable'\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators'\nimport {\n  get as _get,\n  set as _set,\n  isEmpty as _isEmpty,\n} from 'lodash-es'\n\nimport { charactersActionCreators } from './charactersActions'\n\n\nexport function listCharactersEpics(action$) {\n  return action$\n    .pipe(\n      ofType(charactersActionCreators.LIST_ALL.REQUEST),\n      switchMap((action) => {\n        const query = queryString.stringify({ page: _get(action, 'payload.page', 1)})\n\n        const reqQuery = _isEmpty(query)\n          ? ''\n          : `?${query}`\n\n        return ajax.getJSON(`https://rickandmortyapi.com/api/character/${reqQuery}`)\n          .pipe(\n            delay(1),\n            map((response) => {\n              _get(response, 'results', [])\n                .forEach((i, ndx) => {\n                  const episode = _get(response, `results.${ndx}.episode`)\n                    .map((epUrl) => {\n                      const [, epId] = epUrl.match(/episode\\/(\\d+)$/) || [null, null]\n\n                      return epId\n                    })\n\n                  _get(response, `results.${ndx}.episode`, episode)\n                })\n\n              return charactersActionCreators.LIST_ALL.PASSED(response)\n            }),\n            catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response))),\n            takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))),\n          )\n      }),\n      catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error))),\n    )\n}\n\nexport function getCharactersEpisodeEpics(action$) {\n  return action$\n    .pipe(\n      ofType(charactersActionCreators.LIST_ALL.PASSED),\n      switchMap((action) => {\n        response.ep = Array.from(_get(response, 'results', [])\n          .reduce((accum, { episode }, ndx) => {\n            episode.forEach((epUrl) => {\n              const [, epId] = epUrl.match(/episode\\/(\\d+)$/) || [null, null]\n\n              accum.add(epId)\n            })\n            return accum\n          }, new Set()))\n\n        return {\n          type: 'GET_EPISODES',\n          episodes,\n        }\n        // return ajax.getJSON(`https://rickandmortyapi.com/api/character/${reqQuery}`)\n        //   .pipe(\n        //     delay(1),\n        //     map((response) => charactersActionCreators.LIST_ALL.PASSED(response)),\n        //     catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response))),\n        //     takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))),\n        //   )\n      }),\n      catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error))),\n    )\n}\n"]},"metadata":{},"sourceType":"module"}