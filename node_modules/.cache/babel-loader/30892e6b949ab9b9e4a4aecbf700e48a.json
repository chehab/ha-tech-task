{"ast":null,"code":"// import reduxImmutableStateInvariant from 'redux-immutable-state-invariant'\nimport { createEpicMiddleware } from 'redux-observable';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './rootReducer';\nimport rootEpic from './rootEpic';\nvar epicMiddleware = createEpicMiddleware();\nexport default function configureStore(preloadedState) {\n  var middlewares = [epicMiddleware];\n  var middlewareEnhancer = applyMiddleware.apply(void 0, middlewares);\n  var enhancers = [middlewareEnhancer];\n  var composedEnhancers = composeWithDevTools.apply(void 0, enhancers);\n  var store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./rootReducer', function () {\n      return store.replaceReducer(rootReducer);\n    }); // module.hot.accept('./rootEpic', () => epicMiddleware.replaceEpic(require('./rootEpic').default))\n  }\n\n  epicMiddleware.run(rootEpic);\n  return store;\n}","map":{"version":3,"sources":["/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/src/store/configStore.js"],"names":["createEpicMiddleware","composeWithDevTools","createStore","applyMiddleware","rootReducer","rootEpic","epicMiddleware","configureStore","preloadedState","middlewares","middlewareEnhancer","enhancers","composedEnhancers","store","process","env","NODE_ENV","module","hot","accept","replaceReducer","run"],"mappings":"AAAA;AACA,SAASA,oBAAT,QAAqC,kBAArC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,IAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AAGA,eAAe,SAASO,cAAT,CAAwBC,cAAxB,EAAwC;AACrD,MAAMC,WAAW,GAAG,CAACH,cAAD,CAApB;AACA,MAAMI,kBAAkB,GAAGP,eAAe,MAAf,SAAmBM,WAAnB,CAA3B;AAEA,MAAME,SAAS,GAAG,CAACD,kBAAD,CAAlB;AACA,MAAME,iBAAiB,GAAGX,mBAAmB,MAAnB,SAAuBU,SAAvB,CAA1B;AAEA,MAAME,KAAK,GAAGX,WAAW,CAACE,WAAD,EAAcI,cAAd,EAA8BI,iBAA9B,CAAzB;;AAEA,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,MAAM,CAACC,GAApD,EAAyD;AACvDD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,eAAlB,EAAmC;AAAA,aAAMN,KAAK,CAACO,cAAN,CAAqBhB,WAArB,CAAN;AAAA,KAAnC,EADuD,CAEvD;AACD;;AAEDE,EAAAA,cAAc,CAACe,GAAf,CAAmBhB,QAAnB;AAEA,SAAOQ,KAAP;AACD","sourcesContent":["// import reduxImmutableStateInvariant from 'redux-immutable-state-invariant'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\nimport { createStore, applyMiddleware } from 'redux'\n\nimport rootReducer from './rootReducer'\nimport rootEpic from './rootEpic'\n\n\nconst epicMiddleware = createEpicMiddleware()\n\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [epicMiddleware]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer]\n  const composedEnhancers = composeWithDevTools(...enhancers)\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./rootReducer', () => store.replaceReducer(rootReducer))\n    // module.hot.accept('./rootEpic', () => epicMiddleware.replaceEpic(require('./rootEpic').default))\n  }\n\n  epicMiddleware.run(rootEpic)\n\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}