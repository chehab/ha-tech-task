{"ast":null,"code":"import { of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { ofType } from 'redux-observable';\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators';\nimport { get as _get } from 'lodash-es';\nimport { episodesActionCreators } from './episodesActions';\nexport function getManyEpisodeEpics(action$) {\n  return action$.pipe(ofType(episodesActionCreators.GET_MANY_EPISODE.REQUEST), switchMap(function (action) {\n    var episodes = Array.from(_get(action, 'payload.results', []).reduce(function (accum, _ref, ndx) {\n      var episode = _ref.episode;\n      episode.forEach(function (epId) {\n        return accum.add(epId);\n      });\n      return accum;\n    }, new Set()));\n    return ajax.getJSON(\"https://rickandmortyapi.com/api/episode/\".concat(episodes.join(','))).pipe(delay(1), map(function (response) {\n      var episodes = _get(response, 'results', []).reduce(function (accum, data) {\n        accum[data.id] = data;\n        return accum;\n      });\n\n      return episodesActionCreators.GET_MANY_EPISODE.PASSED({\n        episodes: episodes\n      });\n    }), catchError(function (error) {\n      return of(episodesActionCreators.GET_MANY_EPISODE.FAILED(error.xhr.response));\n    }), takeUntil(action$.pipe(ofType(episodesActionCreators.GET_MANY_EPISODE.CANCEL))));\n  }), catchError(function (error) {\n    return of(episodesActionCreators.GET_MANY_EPISODE.FAILED(error));\n  }));\n}","map":{"version":3,"sources":["/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/src/Episodes/episodesEpics.js"],"names":["of","ajax","ofType","delay","map","switchMap","takeUntil","catchError","get","_get","episodesActionCreators","getManyEpisodeEpics","action$","pipe","GET_MANY_EPISODE","REQUEST","action","episodes","Array","from","reduce","accum","ndx","episode","forEach","epId","add","Set","getJSON","join","response","data","id","PASSED","error","FAILED","xhr","CANCEL"],"mappings":"AAAA,SAASA,EAAT,QAAmB,MAAnB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,SAArB,EAAgCC,SAAhC,EAA2CC,UAA3C,QAA6D,gBAA7D;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,WAA5B;AAEA,SAASC,sBAAT,QAAuC,mBAAvC;AAGA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,SAAOA,OAAO,CACXC,IADI,CAEHX,MAAM,CAACQ,sBAAsB,CAACI,gBAAvB,CAAwCC,OAAzC,CAFH,EAGHV,SAAS,CAAC,UAACW,MAAD,EAAY;AACpB,QAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAN,CAAWV,IAAI,CAACO,MAAD,EAAS,iBAAT,EAA4B,EAA5B,CAAJ,CACzBI,MADyB,CAClB,UAACC,KAAD,QAAqBC,GAArB,EAA6B;AAAA,UAAnBC,OAAmB,QAAnBA,OAAmB;AACnCA,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,IAAD;AAAA,eAAUJ,KAAK,CAACK,GAAN,CAAUD,IAAV,CAAV;AAAA,OAAhB;AACA,aAAOJ,KAAP;AACD,KAJyB,EAIvB,IAAIM,GAAJ,EAJuB,CAAX,CAAjB;AAOA,WAAO1B,IAAI,CAAC2B,OAAL,mDAAwDX,QAAQ,CAACY,IAAT,CAAc,GAAd,CAAxD,GACJhB,IADI,CAEHV,KAAK,CAAC,CAAD,CAFF,EAGHC,GAAG,CAAC,UAAC0B,QAAD,EAAc;AAChB,UAAMb,QAAQ,GAAGR,IAAI,CAACqB,QAAD,EAAW,SAAX,EAAsB,EAAtB,CAAJ,CACdV,MADc,CACP,UAACC,KAAD,EAAQU,IAAR,EAAiB;AACvBV,QAAAA,KAAK,CAACU,IAAI,CAACC,EAAN,CAAL,GAAiBD,IAAjB;AACA,eAAOV,KAAP;AACD,OAJc,CAAjB;;AAMA,aAAOX,sBAAsB,CAACI,gBAAvB,CAAwCmB,MAAxC,CAA+C;AAAEhB,QAAAA,QAAQ,EAARA;AAAF,OAA/C,CAAP;AACD,KARE,CAHA,EAYHV,UAAU,CAAC,UAAC2B,KAAD;AAAA,aAAWlC,EAAE,CAACU,sBAAsB,CAACI,gBAAvB,CAAwCqB,MAAxC,CAA+CD,KAAK,CAACE,GAAN,CAAUN,QAAzD,CAAD,CAAb;AAAA,KAAD,CAZP,EAaHxB,SAAS,CAACM,OAAO,CAACC,IAAR,CAAaX,MAAM,CAACQ,sBAAsB,CAACI,gBAAvB,CAAwCuB,MAAzC,CAAnB,CAAD,CAbN,CAAP;AAeD,GAvBQ,CAHN,EA2BH9B,UAAU,CAAC,UAAC2B,KAAD;AAAA,WAAWlC,EAAE,CAACU,sBAAsB,CAACI,gBAAvB,CAAwCqB,MAAxC,CAA+CD,KAA/C,CAAD,CAAb;AAAA,GAAD,CA3BP,CAAP;AA6BD","sourcesContent":["import { of } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { ofType } from 'redux-observable'\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators'\nimport { get as _get } from 'lodash-es'\n\nimport { episodesActionCreators } from './episodesActions'\n\n\nexport function getManyEpisodeEpics(action$) {\n  return action$\n    .pipe(\n      ofType(episodesActionCreators.GET_MANY_EPISODE.REQUEST),\n      switchMap((action) => {\n        const episodes = Array.from(_get(action, 'payload.results', [])\n          .reduce((accum, { episode }, ndx) => {\n            episode.forEach((epId) => accum.add(epId))\n            return accum\n          }, new Set()))\n\n\n        return ajax.getJSON(`https://rickandmortyapi.com/api/episode/${episodes.join(',')}`)\n          .pipe(\n            delay(1),\n            map((response) => {\n              const episodes = _get(response, 'results', [])\n                .reduce((accum, data) => {\n                  accum[data.id] = data\n                  return accum\n                })\n\n              return episodesActionCreators.GET_MANY_EPISODE.PASSED({ episodes })\n            }),\n            catchError((error) => of(episodesActionCreators.GET_MANY_EPISODE.FAILED(error.xhr.response))),\n            takeUntil(action$.pipe(ofType(episodesActionCreators.GET_MANY_EPISODE.CANCEL))),\n          )\n      }),\n      catchError((error) => of(episodesActionCreators.GET_MANY_EPISODE.FAILED(error))),\n    )\n}\n"]},"metadata":{},"sourceType":"module"}