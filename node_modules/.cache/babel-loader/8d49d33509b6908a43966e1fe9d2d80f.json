{"ast":null,"code":"import _slicedToArray from \"/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport queryString from 'query-string';\nimport { of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { ofType } from 'redux-observable';\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators';\nimport { get as _get, set as _set, isEmpty as _isEmpty } from 'lodash-es';\nimport { episodesActionCreators } from '../Episodes/episodesActions';\nimport { charactersActionCreators } from './charactersActions';\nexport function listCharactersEpics(action$) {\n  return action$.pipe(ofType(charactersActionCreators.LIST_ALL.REQUEST), switchMap(function (action) {\n    var query = queryString.stringify({\n      page: _get(action, 'payload.page', 1)\n    });\n    var reqQuery = _isEmpty(query) ? '' : \"?\".concat(query);\n    return ajax.getJSON(\"https://rickandmortyapi.com/api/character/\".concat(reqQuery)).pipe(delay(1), map(function (response) {\n      _get(response, 'results', []).forEach(function (i, ndx) {\n        var episodesIds = _get(response, \"results.\".concat(ndx, \".episode\")).map(function (epUrl) {\n          var _ref = epUrl.match(/episode\\/(\\d+)$/) || [null, null],\n              _ref2 = _slicedToArray(_ref, 2),\n              epId = _ref2[1];\n\n          return epId;\n        });\n\n        _set(response, \"results.\".concat(ndx, \".episodesIds\"), episodesIds);\n      });\n\n      return charactersActionCreators.LIST_ALL.PASSED(response);\n    }), catchError(function (error) {\n      return of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response));\n    }), takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))));\n  }), catchError(function (error) {\n    return of(charactersActionCreators.LIST_ALL.FAILED(error));\n  }));\n}\nexport function getCharactersEpisodeEpics(action$) {\n  return action$.pipe(ofType(charactersActionCreators.LIST_ALL.PASSED), switchMap(function (action) {\n    var episodes = Array.from(_get(action, 'payload.results', []).reduce(function (accum, _ref3, ndx) {\n      var episode = _ref3.episode;\n      episode.forEach(function (epId) {\n        return accum.add(epId);\n      });\n      return accum;\n    }, new Set()));\n    return of(episodesActionCreators.GET_MANY_EPISODE.REQUEST(episodes));\n  }));\n}","map":{"version":3,"sources":["/Volumes/macOS SD/Users/c.mostafa/Projects/ha-tech-task/src/Characters/charactersEpics.js"],"names":["queryString","of","ajax","ofType","delay","map","switchMap","takeUntil","catchError","get","_get","set","_set","isEmpty","_isEmpty","episodesActionCreators","charactersActionCreators","listCharactersEpics","action$","pipe","LIST_ALL","REQUEST","action","query","stringify","page","reqQuery","getJSON","response","forEach","i","ndx","episodesIds","epUrl","match","epId","PASSED","error","FAILED","xhr","CANCEL","getCharactersEpisodeEpics","episodes","Array","from","reduce","accum","episode","add","Set","GET_MANY_EPISODE"],"mappings":"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","sourcesContent":["import queryString from 'query-string'\nimport { of } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { ofType } from 'redux-observable'\nimport { delay, map, switchMap, takeUntil, catchError } from 'rxjs/operators'\nimport {\n  get as _get,\n  set as _set,\n  isEmpty as _isEmpty,\n} from 'lodash-es'\n\nimport { episodesActionCreators } from '../Episodes/episodesActions'\nimport { charactersActionCreators } from './charactersActions'\n\n\nexport function listCharactersEpics(action$) {\n  return action$\n    .pipe(\n      ofType(charactersActionCreators.LIST_ALL.REQUEST),\n      switchMap((action) => {\n        const query = queryString.stringify({ page: _get(action, 'payload.page', 1)})\n\n        const reqQuery = _isEmpty(query)\n          ? ''\n          : `?${query}`\n\n        return ajax.getJSON(`https://rickandmortyapi.com/api/character/${reqQuery}`)\n          .pipe(\n            delay(1),\n            map((response) => {\n              _get(response, 'results', [])\n                .forEach((i, ndx) => {\n                  const episodesIds = _get(response, `results.${ndx}.episode`)\n                    .map((epUrl) => {\n                      const [, epId] = epUrl.match(/episode\\/(\\d+)$/) || [null, null]\n\n                      return epId\n                    })\n\n                  _set(response, `results.${ndx}.episodesIds`, episodesIds)\n                })\n\n              return charactersActionCreators.LIST_ALL.PASSED(response)\n            }),\n            catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error.xhr.response))),\n            takeUntil(action$.pipe(ofType(charactersActionCreators.LIST_ALL.CANCEL))),\n          )\n      }),\n      catchError((error) => of(charactersActionCreators.LIST_ALL.FAILED(error))),\n    )\n}\n\n\nexport function getCharactersEpisodeEpics(action$) {\n  return action$\n    .pipe(\n      ofType(charactersActionCreators.LIST_ALL.PASSED),\n      switchMap((action) => {\n        const episodes = Array.from(_get(action, 'payload.results', [])\n          .reduce((accum, { episode }, ndx) => {\n            episode.forEach((epId) => accum.add(epId))\n            return accum\n          }, new Set()))\n\n        return of(episodesActionCreators.GET_MANY_EPISODE.REQUEST(episodes))\n      }),\n    )\n}\n"]},"metadata":{},"sourceType":"module"}